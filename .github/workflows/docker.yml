name: Docker Build and Push

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    - cron: '0 6 * * 0'  # Weekly on Sunday at 6 AM

jobs:
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t zap-custom-mcp:test .
          echo "‚úÖ Docker image built successfully"
          docker images zap-custom-mcp:test

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          docker build -t zap-custom-mcp:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'zap-custom-mcp:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload SARIF results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-sarif-results
          path: trivy-results.sarif
          retention-days: 30


  notify:
    name: Notify Docker Build Status
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security-scan]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.docker-build.result == 'success' && needs.docker-security-scan.result == 'success'
        run: |
          echo "‚úÖ Docker build completed successfully!"
          echo "üîí Security scan passed"

      - name: Notify failure
        if: needs.docker-build.result == 'failure' || needs.docker-security-scan.result == 'failure'
        run: |
          echo "‚ùå Docker build failed!"
          echo "Build: ${{ needs.docker-build.result }}"
          echo "Security: ${{ needs.docker-security-scan.result }}"
